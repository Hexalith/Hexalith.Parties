@inherits FluentInputBase<PostalAddressViewModel>
@using System.ComponentModel.DataAnnotations
@using System.Globalization
@using System.Text.Json
@using Hexalith.Parties.Application.Services
@using Hexalith.Parties.Domain.ValueObjets


@inject IPlaceService _placeService ﻿
@inject IGeolocationService _locationService
<FluentTabs>
    <FluentTab Label="Address">
        <FluentAutocomplete 
            @bind-SelectedOptions="@_selectedPlaces"
            AutoComplete="on"
            Id="@(_childIdPrefix+"-auto-complete")"
            MaximumSelectedOptions="1"
            Placeholder="@Placeholder"
            OnOptionsSearch="@OnSearchAsync"
            OptionStyle="min-height: 40px;"
            OptionText="(item => item.Description)" 
            TOption="PlaceDescription"
            Width="100%">
        </FluentAutocomplete>
    </FluentTab> 
    <FluentTab Label="Details">
        <FluentGrid>
            <FluentGridItem xs="12">
                <FluentLabel Id="@(_childIdPrefix+"-label")">@Label</FluentLabel>
            </FluentGridItem>
            <FluentGridItem xs="12" sm="4">
                <FluentTextField Label="Name" @bind-Value="@PostalAddressName" style="width: 100%;"></FluentTextField>
            </FluentGridItem>
            <FluentGridItem xs="12" sm="8">
                <FluentTextField Label="Description" @bind-Value="@PostalAddressDescription" style="width: 100%;"></FluentTextField>
            </FluentGridItem>
            <FluentGridItem xs="4">
                <FluentTextField Label="Number" @bind-Value="@Value!.StreetNumber" style="width: 100%;"></FluentTextField>
            </FluentGridItem>
            <FluentGridItem xs="8">
                <FluentTextField Label="Street" @bind-Value="@Value!.Street" style="width: 100%;"></FluentTextField>
            </FluentGridItem>
            <FluentGridItem xs="12" sm="4">
                <FluentTextField Label="Zip code" @bind-Value="@Value!.ZipCode" style="width: 100%;"></FluentTextField>
            </FluentGridItem>
            <FluentGridItem xs="12" sm="8">
                <FluentTextField Label="City" @bind-Value="@Value!.City" style="width: 100%;"></FluentTextField>
            </FluentGridItem>
            <FluentGridItem xs="12" sm="4">
                    <FluentTextField Label="State Id" @bind-Value="@Value!.StateId" style="width: 100%;"></FluentTextField>
            </FluentGridItem>
            <FluentGridItem xs="12" sm="8">
                    <FluentTextField Label="State Name" @bind-Value="@Value!.StateName" style="width: 100%;"></FluentTextField>
            </FluentGridItem>
            <FluentGridItem xs="6" sm="3">
                    <FluentTextField Label="Iso3" @bind-Value="@Value!.CountryId" style="width: 100%;"></FluentTextField>
            </FluentGridItem>
            <FluentGridItem xs="6" sm="3">
                    <FluentTextField Label="Iso2" @bind-Value="@Value!.CountryIso2" style="width: 100%;"></FluentTextField>
            </FluentGridItem>
            <FluentGridItem xs="12" sm="6">
                    <FluentTextField Label="Name" @bind-Value="@Value!.CountryName" style="width: 100%;"></FluentTextField>
            </FluentGridItem>    
            <FluentGridItem xs="6">
                    <FluentNumberField  Label="Latitude" @bind-Value="@Value!.Latitude" style="width: 100%;"></FluentNumberField>
            </FluentGridItem>
            <FluentGridItem xs="6">
                    <FluentNumberField  Label="Longitude" @bind-Value="@Value!.Longitude" style="width: 100%;"></FluentNumberField>
            </FluentGridItem>    
        </FluentGrid>
    </FluentTab> 
</FluentTabs>


@code {
    private string? _childIdPrefix;

    [Parameter]
    public string? PostalAddressDescription { get; set; } = "Customer primary address";

    [Parameter]
    public int MinimumSearchTextLengthForAutocomplete { get; set; } = 5;

    [Parameter]
    public string? PostalAddressName { get; set; } = "Primary";

    public IEnumerable<PlaceDescription> _selectedPlaces = [];

    double? _latitude;
    double? _longitude;

    //FluentAutocomplete<PlaceDescription>? _addressAutocomplete;

     protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await SetPostalAddressAsync();
    }

    protected override void OnInitialized()
    {
        _childIdPrefix = this.Id;
    }

    protected override string FormatValueAsString(PostalAddressViewModel? value) 
        => value == null ? string.Empty : JsonSerializer.Serialize(value);

    private async Task SetPostalAddressAsync()
    {
        var placeId = _selectedPlaces?.FirstOrDefault()?.Id;
        if (!string.IsNullOrWhiteSpace(placeId) && Value?.PlaceId != placeId)
        {
            var value = await _placeService.GetPostalAddressAsync(placeId, CancellationToken.None) ?? new PostalAddress();
            Value = new PostalAddressViewModel(value);
            if (value != null)
            {
                Value.Name = PostalAddressName;
                Value.Description = PostalAddressDescription;
            }
            StateHasChanged();
        }
    }

    private async Task OnAutocompleteValueChanged(string? value)
    {
        await SetPostalAddressAsync();
    }    

    private async Task<IEnumerable<PlaceDescription>> GetOptionsAsync(string search, int maxResults)
    {
        if (string.IsNullOrWhiteSpace(search) || search.Length < MinimumSearchTextLengthForAutocomplete)
        {
            return[];
        }
        if (_latitude == null || _longitude == null)
        {
            await _locationService
                .GetCurrentPositionAsync(OnLocationFound, OnLocationNotFound, new PositionOptions()
                {
                    Timeout = 5000,
                });
        }

        return await _placeService.GetAutocompleteOptionsAsync(
                search,
                CultureInfo.CurrentCulture.TwoLetterISOLanguageName,
                maxResults,
                _latitude,
                _longitude,
                CancellationToken.None)
            .ConfigureAwait(false);
    }
    protected virtual async Task OnSearchAsync(OptionsSearchEventArgs<PlaceDescription> searchArgs)
    {
        ArgumentNullException.ThrowIfNull(searchArgs);

        searchArgs.Items = await GetOptionsAsync(searchArgs.Text, 10);
    }
    
    protected override async Task OnParametersSetAsync()
    {
        await SetPostalAddressAsync();
    }
    

    void OnLocationFound(GeolocationPosition coordinates)
    {
        _latitude=coordinates.Coords.Latitude;
        _longitude=coordinates.Coords.Longitude;
    }
    void OnLocationNotFound(GeolocationPositionError error)
    {
        _latitude =0;
        _longitude =0;
    }
    protected override bool TryParseValueFromString(string? value, out PostalAddressViewModel? result, out string validationErrorMessage)
    {
        if (Value == null || string.IsNullOrWhiteSpace(value))
        {
            result = null;
            validationErrorMessage = string.Empty;
            return false;
        }
        result = JsonSerializer.Deserialize<PostalAddressViewModel>(value);
        validationErrorMessage = string.Empty;
        return true;
    }
}
